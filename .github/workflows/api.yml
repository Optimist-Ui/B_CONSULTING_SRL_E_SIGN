name: E-Sign API – Build, Push & Deploy

on:
  push:
    branches:
      - dev
      - uat
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || (github.ref_name == 'dev' && 'development' || github.ref_name) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "ECR_REPO=${{ secrets.ECR_REPO_API }}" >> $GITHUB_ENV
          case "${{ github.ref_name }}" in
            dev)
              echo "ENVIRONMENT=development" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-dev" >> $GITHUB_ENV
              echo "HOST_PORT=3002" >> $GITHUB_ENV
              ;;
            uat)
              echo "ENVIRONMENT=uat" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-uat" >> $GITHUB_ENV
              echo "HOST_PORT=3003" >> $GITHUB_ENV
              ;;
            main)
              echo "ENVIRONMENT=production" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-prod" >> $GITHUB_ENV
              echo "HOST_PORT=3001" >> $GITHUB_ENV
              ;;
            *)
              echo "ENVIRONMENT=development" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-dev" >> $GITHUB_ENV
              echo "HOST_PORT=3002" >> $GITHUB_ENV
              ;;
          esac

      - name: Build & Push image
        run: |
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          ECR_REPO="${{ env.ECR_REPO }}"
          COMMIT_SHA="${{ github.sha }}"

          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${COMMIT_SHA}"
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          echo "Building Docker image..."
          docker build -f infra/docker/Dockerfile.api -t $IMAGE_URI .

          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Pushing image to ECR..."
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e  # Exit on any error

            # Set variables for clarity
            AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
            AWS_REGION="${{ env.AWS_REGION }}"
            ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
            IMAGE_URI="${{ env.IMAGE_URI }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            HOST_PORT="${{ env.HOST_PORT }}"

            echo "=== Pre-deployment Cleanup ==="
            # Clean up Docker system to free space
            docker system prune -f

            # Remove old images except the latest few
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | grep esign-api | tail -n +6 | awk '{print $1}' | xargs -r docker rmi -f || true

            echo "=== Disk Space Check ==="
            df -h /
            docker system df

            echo "=== ECR Login ==="
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "=== Pulling Image ==="
            echo "Pulling image: $IMAGE_URI"
            docker pull $IMAGE_URI

            echo "=== Container Management ==="
            # Stop and remove existing container
            docker stop $CONTAINER_NAME || true
            docker rm -f $CONTAINER_NAME || true

            echo "=== Environment Setup ==="
            # Create temporary env file for SendGrid templates
            cat > /tmp/sendgrid_templates.env << 'EOF'
            ${{ secrets.SENDGRID_TEMPLATES }}
            EOF

            echo "=== Container Deployment ==="
            # Run new container with environment-specific variables
            docker run -d \
              --env-file /tmp/sendgrid_templates.env \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p $HOST_PORT:${{ secrets.PORT }} \
              -e PORT=${{ secrets.PORT }} \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e CLIENT_URL="${{ secrets.CLIENT_URL }}" \
              -e SPRYNG_API_TOKEN="${{ secrets.SPRYNG_API_TOKEN }}" \
              -e BCRYPT_ROUNDS="${{ secrets.BCRYPT_ROUNDS }}" \
              -e REMINDER_CRON="${{ secrets.REMINDER_CRON }}" \
              -e ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
              -e SENDGRID_FROM_EMAIL="${{ secrets.SENDGRID_FROM_EMAIL }}" \
              -e SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
              $IMAGE_URI

            echo "=== Verification ==="
            # Verify container is running
            sleep 5
            docker ps | grep $CONTAINER_NAME

            echo "=== Cleanup ==="
            # Clean up temporary file
            rm -f /tmp/sendgrid_templates.env

            echo "✅ Deployment completed for $CONTAINER_NAME on port $HOST_PORT"
