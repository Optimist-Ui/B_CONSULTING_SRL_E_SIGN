name: E-Sign API – Build, Push & Deploy

on:
  push:
    branches:
      - dev
      - uat
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref_name == 'main' && 'production' || (github.ref_name == 'dev' && 'development' || github.ref_name) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "ECR_REPO=${{ secrets.ECR_REPO_API }}" >> $GITHUB_ENV
          case "${{ github.ref_name }}" in
            dev)
              echo "ENVIRONMENT=development" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-dev" >> $GITHUB_ENV
              echo "HOST_PORT=3002" >> $GITHUB_ENV
              ;;
            uat)
              echo "ENVIRONMENT=uat" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-uat" >> $GITHUB_ENV
              echo "HOST_PORT=3003" >> $GITHUB_ENV
              ;;
            main)
              echo "ENVIRONMENT=production" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-prod" >> $GITHUB_ENV
              echo "HOST_PORT=3001" >> $GITHUB_ENV
              ;;
            *)
              echo "ENVIRONMENT=development" >> $GITHUB_ENV
              echo "CONTAINER_NAME=esign-api-dev" >> $GITHUB_ENV
              echo "HOST_PORT=3002" >> $GITHUB_ENV
              ;;
          esac

      - name: Build & Push image
        run: |
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION="${{ env.AWS_REGION }}"
          ECR_REPO="${{ env.ECR_REPO }}"
          COMMIT_SHA="${{ github.sha }}"

          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${COMMIT_SHA}"
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          echo "Building Docker image..."
          docker build -f infra/docker/Dockerfile.api -t $IMAGE_URI .

          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

          echo "Pushing image to ECR..."
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          HOST_PORT: ${{ env.HOST_PORT }}
          SENDGRID_TEMPLATES: ${{ secrets.SENDGRID_TEMPLATES }}
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          S3_MAX_FILE_SIZE: ${{ secrets.S3_MAX_FILE_SIZE }}
          S3_SIGNED_URL_EXPIRY: ${{ secrets.S3_SIGNED_URL_EXPIRY }}
          SPRYNG_API_TOKEN: ${{ secrets.SPRYNG_API_TOKEN }}
          BCRYPT_ROUNDS: ${{ secrets.BCRYPT_ROUNDS }}
          REMINDER_CRON: ${{ secrets.REMINDER_CRON }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          SENDGRID_FROM_EMAIL: ${{ secrets.SENDGRID_FROM_EMAIL }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STARTER_YEARLY_PRICE_ID: ${{ secrets.STARTER_YEARLY_PRICE_ID }}
          STARTER_MONTHLY_PRICE_ID: ${{ secrets.STARTER_MONTHLY_PRICE_ID }}
          PRO_YEARLY_PRICE_ID: ${{ secrets.PRO_YEARLY_PRICE_ID }}
          PRO_MONTHLY_PRICE_ID: ${{ secrets.PRO_MONTHLY_PRICE_ID }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCOUNT_ID,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,IMAGE_URI,CONTAINER_NAME,HOST_PORT,SENDGRID_TEMPLATES,PORT,MONGO_URI,JWT_SECRET,CLIENT_URL,AWS_S3_BUCKET,S3_MAX_FILE_SIZE,S3_SIGNED_URL_EXPIRY,SPRYNG_API_TOKEN,BCRYPT_ROUNDS,REMINDER_CRON,ADMIN_EMAIL,SENDGRID_FROM_EMAIL,SENDGRID_API_KEY,STRIPE_SECRET_KEY,STRIPE_WEBHOOK_SECRET,STARTER_YEARLY_PRICE_ID,STARTER_MONTHLY_PRICE_ID,PRO_YEARLY_PRICE_ID,PRO_MONTHLY_PRICE_ID
          script: |
            set -e  # Exit on any error

            # Set variables for clarity - these come from envs now
            ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

            echo "=== Pre-deployment Cleanup ==="
            # Clean up Docker system to free space
            docker system prune -f

            # Remove old images except the latest few
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | grep esign-api | tail -n +6 | awk '{print $1}' | xargs -r docker rmi -f || true

            echo "=== Disk Space Check ==="
            df -h /
            docker system df

            echo "=== ECR Login ==="
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "=== Pulling Image ==="
            echo "Pulling image: $IMAGE_URI"
            docker pull $IMAGE_URI

            echo "=== Container Management ==="
            # Stop and remove existing container
            docker stop $CONTAINER_NAME || true
            docker rm -f $CONTAINER_NAME || true

            echo "=== Environment Setup ==="
            # Create temporary env file for SendGrid templates
            echo "$SENDGRID_TEMPLATES" > /tmp/sendgrid_templates.env

            echo "=== Container Deployment ==="
            echo "Running container with IMAGE_URI: $IMAGE_URI"
            # Run new container with environment-specific variables
            docker run -d \
              --env-file /tmp/sendgrid_templates.env \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p "$HOST_PORT:$PORT" \
              -e "PORT=$PORT" \
              -e "MONGO_URI=$MONGO_URI" \
              -e "JWT_SECRET=$JWT_SECRET" \
              -e "CLIENT_URL=$CLIENT_URL" \
              -e "AWS_REGION=$AWS_REGION" \
              -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" \
              -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" \
              -e "AWS_S3_BUCKET=$AWS_S3_BUCKET" \
              -e "S3_SIGNED_URL_EXPIRY=$S3_SIGNED_URL_EXPIRY" \
              -e "S3_MAX_FILE_SIZE=$S3_MAX_FILE_SIZE" \
              -e "SPRYNG_API_TOKEN=$SPRYNG_API_TOKEN" \
              -e "STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET" \
              -e "STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY" \
              -e "STARTER_YEARLY_PRICE_ID=$STARTER_YEARLY_PRICE_ID" \
              -e "STARTER_MONTHLY_PRICE_ID=$STARTER_MONTHLY_PRICE_ID" \
              -e "PRO_YEARLY_PRICE_ID=$PRO_YEARLY_PRICE_ID" \
              -e "PRO_MONTHLY_PRICE_ID=$PRO_MONTHLY_PRICE_ID" \
              -e "BCRYPT_ROUNDS=$BCRYPT_ROUNDS" \
              -e "REMINDER_CRON=$REMINDER_CRON" \
              -e "ADMIN_EMAIL=$ADMIN_EMAIL" \
              -e "SENDGRID_FROM_EMAIL=$SENDGRID_FROM_EMAIL" \
              -e "SENDGRID_API_KEY=$SENDGRID_API_KEY" \
              "$IMAGE_URI"

            echo "=== Verification ==="
            # Verify container is running
            sleep 5
            docker ps | grep "$CONTAINER_NAME"

            echo "=== Cleanup ==="
            # Clean up temporary file
            rm -f /tmp/sendgrid_templates.env

            echo "✅ Deployment completed for $CONTAINER_NAME on port $HOST_PORT"
